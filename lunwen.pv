(* 

Needham-Schroeder public key protocol
Corrected version by Lowe

	   ? -> A : pkB
Message 1: A -> S : (A, B)
Message 2: S -> A : { B, pkB }_skS
Message 3: A -> B : { N_A, A }_pkB
Message 4: B -> S : (B, A)
Message 5: S -> B : { A, pkA }_skS
Message 6: B -> A : { N_A, N_B, B }_pkA
Message 7: A -> B : { N_B }_pkB

The heart of the protocol is messages 3, 6, 7.

*)

free c: channel[private].

type host.
type nonce.
type pkey.
type skey.
type spkey.
type sskey.
type certificate.

fun nonce_to_bitstring(nonce): bitstring [data,typeConverter].

(* Public key encryption *)

fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)),y) = x.

(* Signatures *)

fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, k: sskey; getmess(sign(m,k)) = m.
reduc forall m: bitstring, k: sskey; checksign(sign(m,k), spk(k)) = m.


(* Shared key encryption *)

fun sencrypt(bitstring,nonce): bitstring.
reduc forall x: bitstring, y: nonce; sdecrypt(sencrypt(x,y),y) = x.

(* Secrecy assumptions *)

not attacker(new skA).
not attacker(new skB).
not attacker(new skS).

(* 2 honest host names A and B *)

free A, B: host.

(* the table host names/keys 
   The key table consists of pairs (host, public key) *)
table keys(host, pkey).

(* Queries *)

free secretANa, secretANb, secretBNa, secretBNb: bitstring [private].
query attacker(secretANa);
      attacker(secretANb);
      attacker(secretBNa);
      attacker(secretBNb).

event beginBparam(host, host).
event endBparam(host, host).
event beginAparam(host, host).
event endAparam(host, host).
event beginBfull(host, host, pkey, pkey, nonce, nonce).
event endBfull(host, host, pkey, pkey, nonce, nonce).
event beginAfull(host, host, pkey, pkey, nonce, nonce).
event endAfull(host, host, pkey, pkey, nonce, nonce).

event debug().
query event(debug).

query x: host, y: host; inj-event(endBparam(x,y)) ==> inj-event(beginBparam(x,y)).
query x1: host, x2: host, x3: pkey, x4: pkey, x5: nonce, x6: nonce; 
      	  inj-event(endBfull(x1,x2,x3,x4,x5,x6)) ==> inj-event(beginBfull(x1,x2,x3,x4,x5,x6)).
query x: host, y: host; inj-event(endAparam(x,y)) ==> inj-event(beginAparam(x,y)).
query x1: host, x2: host, x3: pkey, x4: pkey, x5: nonce, x6: nonce; 
      	  inj-event(endAfull(x1,x2,x3,x4,x5,x6)) ==> inj-event(beginAfull(x1,x2,x3,x4,x5,x6)).

(* Role of the initiator with identity xA and secret key skxA *)

let processApp(pkS: spkey, skA: skey, pkA: pkey, A: host, Ca: bitstring) =
        (*     *)
	(* Message 1: send the public key certificate to other host *)
	out(c, (A, pkA, Ca));

	in(c, (m:bitstring, xCc:bitstring));
	let (NX:nonce, hostX:host , pkX:pkey) = decrypt(m, skA) in
	let (=hostX, =pkX) = checksign(xCc,pkS) in
	event beginBparam(A, hostX);

        (* Message 3 *)
	new N2: nonce; 
        out(c, encrypt((N2, NX, A), pkX));

        in(c, m2:bitstring);
	if nonce_to_bitstring(N2) = decrypt(m2, skA) then
	new K:nonce;
	out(c, ecrypt(sign(K,skA), pkX));

	event endAparam(xA, hostX);
	event endAfull(xA, hostX, pkX, pkxA, Na, NX2);
	event debug();
	

(* Role of the responder with identity xB and secret key skxB *)

let processResponder(pkS: spkey, skB: skey, pkB: pkey, B: host, Cc: bitstring) =
        (* receive the public key certificate and check *)
        in(c, (hostY: host, pkY: pkey, xCa: bitstring));
	let (=hostY, =pkY) = checksign(xCa, pkS) in
	new N1: nonce;
	
	(* Message 4: Get the public key certificate for the other host *)
        out(c, (encrypt((N1, B, pkB), pkY),Cc) );
	event beginAparam(hostY, B);
   	in(c, m1: bitstring); 
        let (NX2: nonce, =N1, =hostY) = decrypt(m1, skB) in

        out(c, encrypt(NX2,pkxA));

        in(c, m3:bitstring);
        let nonce_to_bitstring(xK:nonce) = checksign(decrypt(m3, skB), pkY) in

	event endBparam(hostY, xB);
	event endBfull(hostY, xB, pkxB, pkY, NY, Nb);



(* Server *)

let processS(skS: sskey) =  
        in(c,(a: host, b: host)); 
	get keys(=b, sb) in
        out(c,sign((sb,b),skS)).

(* Key registration *)

let processK =
        in(c, (h: host, k: pkey));
        if h <> A && h <> B then insert keys(h,k).

(* Start process *)

process new skA: skey; 
	let pkA = pk(skA) in
        out(c, pkA);
	insert keys(A, pkA);
        new skB: skey; 
	let pkB = pk(skB) in
        out(c, pkB);
	insert keys(B, pkB);
	new skS: sskey; 
	let pkS = spk(skS) in
	let Cc = sign((B, pkB), skS) in    
	let Ca = sign((A, pkA), skS) in
	out(c, pkS);
	(
          (* Launch an unbounded number of sessions of the initiator *)
          (!processApp(pkS, skA, pkA, A, Ca)) | 
          (* Launch an unbounded number of sessions of the responder *)
          (!processResponder(pkS, skB, pkB, B, Cc)) |
          (* Launch an unbounded number of sessions of the server *)
          (!processS(skS)) |
          (* Key registration process *)
	  (!processK)
        )


